# ChatUI Architecture Guidelines

## Architecture Diagram Usage
- ALWAYS review architectureDiagrams.md at the beginning of any task
- For UI components, refer to Component Architecture diagram (diagram 1)
- For service-related tasks, refer to Service Architecture diagram (diagram 2)
- For data flow understanding, refer to Data Flow Diagram (diagram 3)
- For theming work, refer to Theming System diagram (diagram 4)
- For environment configuration, refer to Environment Configuration diagram (diagram 5)
- For message processing logic, refer to Response Processing Flow diagram (diagram 6)
- For responsive design tasks, refer to Responsive Design System diagram (diagram 7)
- For loading state implementations, refer to Loading State System diagram (diagram 8)
- For auto-scrolling functionality, refer to Auto-Scrolling System diagram (diagram 9)

## Architecture First Approach
- Before making any code changes, identify which architectural component is affected
- Verify the diagram accurately represents the current state of the system
- If implementation will deviate from the diagram, document why and update the diagram
- After implementing significant changes, update the corresponding diagram

## Environment Configuration Guidelines
- Use GitHub Secrets + .env generation for all variables during development and build
- For production runtime on Azure, configure environment variables using Azure App Settings
- NEVER hardcode environment values in the codebase or workflow files
- Ensure all sensitive values are stored as secrets in GitHub and Azure
- When adding new environment variables:
  1. Add to .env.local for local development
  2. Add to GitHub Secrets for CI/CD builds
  3. Configure in Azure App Settings for production runtime
- When API requirements change, update configureAppSettings.yml workflow
- Maintain the Environment Configuration diagram (diagram 5) in sync with actual configuration
- For frontend environments in Azure Static Web Apps, environment variables MUST be set at build time via GitHub Secrets

## Build and Deployment Guidelines
- Azure Static Web App frontend build must have ESLint and TypeScript error checking disabled in next.config.ts
- Use the following configuration for production builds:
  ```typescript
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  }
  ```
- The GitHub workflow azure-static-web-apps.yml handles frontend deployment
- GitHub Secrets are used to inject environment variables during build
- Mock services are used for dev deployments (STANDARD_CHAT_API_MODE=mock, CHAT_HISTORY_MODE=local)
- The workflow has a manual trigger (workflow_dispatch) for testing deployments
- There is no API backend connected directly to this Static Web App

## GitHub-Flavored Markdown Guidelines
- All documentation MUST use GitHub-flavored Markdown (GFM) consistently
- Mermaid diagrams MUST be enclosed in ```mermaid code blocks
- Use checkbox lists for task tracking with the following syntax:
  - `- [ ]` for incomplete tasks
  - `- [x]` for completed tasks
- Emoji usage is permitted but should be meaningful and not excessive
  - Use `:emoji_name:` syntax for consistency
  - Prefer standard emoji names from GitHub's supported list
- Use YAML frontmatter for metadata when appropriate, enclosed between `---` lines
- For footnotes, use the `[^1]` syntax with the definition at the bottom of the document
- Document structure must follow a clear hierarchy:
  - H1 (`#`) for document title (only one per document)
  - H2 (`##`) for major sections
  - H3 (`###`) for subsections
  - H4 (`####`) for sub-subsections
- Code samples must specify the language for proper syntax highlighting:
  - ```typescript for TypeScript code
  - ```yaml for YAML files
  - ```json for JSON content
- URLs must be enclosed in angle brackets for automatic linking: `<https://example.com>`
- Use relative links to reference other files in the repository
- Tables should include alignment indicators (`:---`, `:---:`, `---:`)
- **Documentation Style**: Write fun, energetic, clear, and concise documentation âœ¨. Use well-placed emojis to add personality ðŸ˜Š, but avoid overuse ðŸš«.

## Component Development Guidelines
- Follow atomic design principles as shown in diagram 1
- Components must be built according to the hierarchy (atom â†’ molecule â†’ organism â†’ template)
- Maintain clear separation between UI layer and service layer as shown in diagram 2
- Respect the data flow shown in diagram 3

## Service Development Guidelines
- Adhere to the service architecture in diagram 2
- All services must implement the appropriate service interface
- Use the ServiceFactory pattern for service creation
- Respect environment variable configuration as shown in diagram 5

## Responsive Design Guidelines
- Follow the responsive design patterns in diagram 7
- Implement breakpoint strategies consistently
- Use component adaptations as shown in the diagram

## Storybook Implementation Guidelines
- Each component MUST have corresponding Storybook stories
- Stories must accurately reflect current component implementation
- Stories should follow hierarchical organization matching atomic design principles
- **File Naming:** Use the format `ComponentName.stories.tsx`.
- **Structure:** Follow a standard structure: Imports, Meta definition, Template function (if needed), Primary story, Variant stories.
- **Decorators:** Consistently use decorators for essential providers (`ThemeProvider`, `ServiceProvider`, `ChatProvider`) to ensure components render correctly within the Storybook environment.
- **Data Mocking:** Use static, representative mock data directly within story files for clarity and simplicity. Avoid complex mocking libraries unless necessary.
- Component stories must demonstrate:
  - All supported variants and states
  - Proper theme integration in both light and dark mode (Use theme switcher addon)
  - **Theme Integration:** Ensure stories correctly utilize Storybook theme addons (like `storybook-dark-mode` or similar) to sync with the toolbar toggle and reflect the application's `ThemeProvider` behavior.
  - Responsive behavior with mobile-specific stories (Use viewport addon)
  - Integration with other components where relevant
- Use consistent render patterns across similar components
- Include documentation on prop usage in both JSDoc comments and story descriptions.
- **Args/Controls:** Define args explicitly for key props rather than relying solely on auto-generation. Ensure controls are intuitive.
- **Interactions:** For components with significant user interactions, consider adding Storybook interaction tests (`play` function) to verify behavior.
- **Accessibility:** Enable and check the Storybook accessibility addon (`@storybook/addon-a11y`) for all stories to catch basic violations.
- Always test theme switching within stories to ensure proper styling
- When using the Message interface, ensure proper structure with role, content, and timestamp
- Multi-agent stories should demonstrate proper agent identification and color assignments
- For responsive components, create specific mobile viewport stories
- Update stories when component interfaces or behavior changes

### Component-Specific Storybook Guidelines

#### Molecule Component Stories
- **Composition Showcase:** Clearly demonstrate how atomic components are composed together to form the molecule.
- **Internal State:** Showcase how the molecule manages its internal state, if applicable.
- **Interaction Patterns:** Demonstrate interaction patterns between the composed atomic components.
- **Event Propagation:** Show how events are handled and propagated from the molecule to parent components.
- **Controlled vs. Uncontrolled:** Provide stories for both controlled and uncontrolled usage patterns when applicable.
- **Mock Handlers:** Implement mock handlers (e.g., `onClick`, `onChange`) that log actions to the Storybook Actions panel.
- **Responsive Variants:** Include specific stories that demonstrate responsive adaptations for different viewport sizes.
- **Theme Variations:** Show how the molecule's appearance changes with theme variations.
- **Edge Cases:** Include stories that demonstrate edge cases such as empty states, overflow conditions, or error states.

#### Organism Component Stories
- **Complex Composition:** Show how molecules and atoms are composed to form the more complex organism.
- **Context Integration:** Demonstrate integration with relevant context providers (e.g., ThemeProvider, ChatProvider).
- **Data Flow Visualization:** Illustrate data flow within the organism and to/from external components.
- **State Management:** Showcase how the organism manages more complex state (including derived state).
- **Interaction Patterns:** Provide comprehensive stories that demonstrate complex interaction patterns.
- **Loading States:** Include stories that demonstrate all possible loading states and transitions.
- **Error Handling:** Show how errors are handled and displayed within the organism.
- **Mock Service Integration:** Demonstrate integration with mock services when applicable.
- **Responsive Layout Changes:** Showcase significant layout changes that occur at different breakpoints.
- **Accessibility Features:** Highlight specific accessibility features implemented in the organism.
- **Performance Considerations:** Document any performance optimizations made in the component.

#### Template Component Stories
- **Full Page Layout:** Demonstrate the complete page layout with realistic content.
- **Component Composition:** Show how organisms, molecules, and atoms are composed to form the template.
- **Navigation Patterns:** Illustrate navigation patterns and user flows within the template.
- **Context Integration:** Demonstrate integration with all required context providers.
- **Service Integration:** Show integration with multiple services and data sources.
- **Complete User Flows:** Provide stories that demonstrate complete user flows and interactions.
- **State Management:** Showcase how the template manages and coordinates state across multiple components.
- **Responsive Design:** Demonstrate comprehensive responsive design adaptations across multiple breakpoints.
- **Application State:** Show different application states (e.g., authenticated, unauthenticated, admin view).
- **Error Boundaries:** Demonstrate error boundary implementation and recovery mechanisms.
- **Loading Sequences:** Show loading sequences and skeleton screens where applicable.
- **Performance Optimizations:** Document performance optimizations such as code splitting, lazy loading, or memoization.
- **Accessibility Patterns:** Highlight comprehensive accessibility patterns implemented in the template.

## Feature Development Process
1. Review architectureDiagrams.md to understand affected components
2. Create a plan that respects the existing architecture
3. Implement changes according to the design patterns shown
4. Update diagrams if architecture changes
5. Update or create Storybook stories that demonstrate the changes 